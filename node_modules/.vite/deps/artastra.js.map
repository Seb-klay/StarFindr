{
  "version": 3,
  "sources": ["../../artastra/artastra.js", "dep:artastra"],
  "sourcesContent": ["/*!\r\n * artastra\r\n * https://github.com/SEscobedo/artastra\r\n * (c) 2021 Salvador D. Escobedo\r\n * Released under the MIT License.\r\n */\r\n(function (global, factory) {            \r\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n    typeof define === 'function' && define.amd ? define(factory) : \r\n    global.ArtAstra = factory();             \r\n} (this,function() {\r\n        \r\n\r\n/*! *****************************************************************************\r\n\tCopyright (c) Salvador D. Escobedo\r\n\tPermission to use, copy, modify, and/or distribute this software for any\r\n\tpurpose with or without fee is hereby granted.\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n\tREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n\tAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n\tINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n\tLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n\tOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n\tPERFORMANCE OF THIS SOFTWARE.\r\n\t***************************************************************************** */\r\n\r\n    var ArtAstra = (function(THREE) {\r\n        \r\n        var obj = {}\r\n        //------------------------------------------------\r\n\r\n        const AU = 23454.8; //Earth radii per Astronomical unit \r\n       \r\n        obj.CreateRandomStars = CreateRandomStars;\r\n        obj.CreateSun = CreateSun;\r\n        obj.CreateMercury = CreateMercury;\r\n        obj.CreateVenus = CreateVenus;\r\n        obj.CreateEarth = CreateEarth;\r\n        obj.CreateMoon = CreateMoon;\r\n        obj.CreateMars = CreateMars;\r\n        obj.CreateJupiter = CreateJupiter;\r\n        obj.CreateSaturn = CreateSaturn;\r\n        obj.CreateNeptune = CreateNeptune;\r\n        obj.CreateUranus = CreateUranus;\r\n        obj.CreatePluto = CreatePluto;\r\n        obj.CreateSolarSystem = CreateSolarSystem;\r\n        obj.UpdateSolarSystem = UpdateSolarSystem;\r\n\r\n        function CreateRandomStars(radius = 30 * AU){\r\n        \r\n        // stars\r\n        var i, r = radius, starsGeometry = [ new THREE.BufferGeometry(), new THREE.BufferGeometry() ];\r\n        \r\n        var vertices1 = [];\r\n        var vertices2 = [];\r\n        \r\n        var vertex = new THREE.Vector3();\r\n        \r\n        for ( i = 0; i < 250; i ++ ) {\r\n        \r\n            vertex.x = Math.random() * 2 - 1;\r\n            vertex.y = Math.random() * 2 - 1;\r\n            vertex.z = Math.random() * 2 - 1;\r\n            vertex.multiplyScalar( r );\r\n        \r\n            vertices1.push( vertex.x, vertex.y, vertex.z );\r\n        \r\n        }\r\n        \r\n        for ( i = 0; i < 1500; i ++ ) {\r\n        \r\n            vertex.x = Math.random() * 2 - 1;\r\n            vertex.y = Math.random() * 2 - 1;\r\n            vertex.z = Math.random() * 2 - 1;\r\n            vertex.multiplyScalar( r );\r\n        \r\n            vertices2.push( vertex.x, vertex.y, vertex.z );\r\n        \r\n        }\r\n        \r\n        starsGeometry[ 0 ].setAttribute( 'position', new THREE.Float32BufferAttribute( vertices1, 3 ) );\r\n        starsGeometry[ 1 ].setAttribute( 'position', new THREE.Float32BufferAttribute( vertices2, 3 ) );\r\n        \r\n        var stars;\r\n        var starsMaterials = [\r\n            new THREE.PointsMaterial( { color: 0x555555, size: 2, sizeAttenuation: false } ),\r\n            new THREE.PointsMaterial( { color: 0x555555, size: 1, sizeAttenuation: false } ),\r\n            new THREE.PointsMaterial( { color: 0x333333, size: 2, sizeAttenuation: false } ),\r\n            new THREE.PointsMaterial( { color: 0x3a3a3a, size: 1, sizeAttenuation: false } ),\r\n            new THREE.PointsMaterial( { color: 0x1a1a1a, size: 2, sizeAttenuation: false } ),\r\n            new THREE.PointsMaterial( { color: 0x1a1a1a, size: 1, sizeAttenuation: false } )\r\n        ];\r\n        \r\n        const Group = new THREE.Group();\r\n\r\n        for ( i = 10; i < 30; i ++ ) {\r\n        \r\n            stars = new THREE.Points( starsGeometry[ i % 2 ], starsMaterials[ i % 6 ] );\r\n        \r\n            stars.rotation.x = Math.random() * 6;\r\n            stars.rotation.y = Math.random() * 6;\r\n            stars.rotation.z = Math.random() * 6;\r\n            stars.scale.setScalar( i * 10 );\r\n        \r\n            stars.matrixAutoUpdate = false;\r\n            stars.updateMatrix();\r\n            \r\n            Group.add( stars );\r\n        \r\n        }\r\n\r\n        Group.name = \"Stars\";\r\n        return Group;\r\n        }\r\n\r\n        function CreateSun(EarthRadius = 1, position = new THREE.Vector3(0, 0, 0.39 * AU), color = 0xFFFFFF){\r\n\r\n            const geometrySun = new THREE.SphereBufferGeometry( 109.076 * EarthRadius, 70, 70 );\r\n            const geometryCrown = new THREE.PlaneBufferGeometry( 180 * 109.076 * EarthRadius, 180 * 109.076 * EarthRadius );\r\n            //const textureSun = new THREE.TextureLoader().load('textures/heliographic_negative_bw2.jpg');\r\n            const textureCrown = new THREE.TextureLoader().load('./../textures/lensflare/star_flare.png');\r\n            //const materialSun = new THREE.MeshStandardMaterial({emissiveMap : textureSun,emissive: 0xFFFFFF,emissiveIntensity:1});\r\n            const materialSun = new THREE.MeshStandardMaterial({ color : color, emissive: color,emissiveIntensity:1});\r\n            const materialCrown = new THREE.MeshStandardMaterial({emissiveMap : textureCrown, alphaMap:textureCrown, emissive: 0xFFFFFF,emissiveIntensity:1,transparent:true,opacity:1});\r\n            const sun = new THREE.Mesh(geometrySun, materialSun);\r\n            const crown = new THREE.Mesh(geometryCrown, materialCrown);\r\n            sun.name = 'Sun';\r\n            sun.UserData = {Radius : 109.076 * EarthRadius};\r\n            crown.name = 'crown';\r\n            sun.position = position;\r\n            sun.add(crown); \r\n    \r\n            //Sunligth\r\n            const sunlight = new THREE.PointLight( {color: color, decay: 2, intensity: 1} );\r\n            sunlight.castShadow = true;\r\n            //Set up shadow properties for the light\r\n            sunlight.shadow.mapSize.width = 5;  // default\r\n            sunlight.shadow.mapSize.height = 5; // default\r\n            sunlight.shadow.camera.near = 0.5;       // default\r\n            sunlight.shadow.camera.far = 1000 * EarthRadius ; // default\r\n            sunlight.name = 'sunligth';\r\n            sun.add( sunlight );\r\n    \r\n            // lensflares\r\n            /*\r\n            const textureLoader = new THREE.TextureLoader();\r\n    \r\n            //const textureFlare0 = textureLoader.load( 'textures/lensflare/lensflare0.png' );\r\n            const textureFlare3 = textureLoader.load( './../textures/lensflare/lensflare3.png' );\r\n    \r\n    \r\n            const lensflare = new Lensflare();\r\n                        //lensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n                        lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n                        lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n                        lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n                        lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n                        lensflare.name = 'LensFlare'\r\n                        lensflare.visible = false; //Default mode\r\n                        sunlight.add( lensflare );*/\r\n            return sun;\r\n        }\r\n\r\n        //planets....................................\r\n\r\n        function CreateMercury(earthRadius = 1,position = new THREE.Vector3(0, 0, 0.39 * AU)){\r\n            const geometryMercury = new THREE.SphereBufferGeometry( 0.39 * earthRadius, 50, 50 );\r\n            const textureMercury = new THREE.TextureLoader().load('./textures/8k_mercury.jpg');\r\n            const materialMercury = new THREE.MeshStandardMaterial({map : textureMercury});\r\n            const mercury = new THREE.Mesh(geometryMercury, materialMercury);\r\n            mercury.position = position;\r\n            mercury.name = 'Mercury';\r\n            return mercury;\r\n        }\r\n\r\n        function CreateVenus(earthRadius = 1,position = new THREE.Vector3(0, 0, 0.72 * AU)){\r\n            const geometryVenus = new THREE.SphereBufferGeometry( 0.95 * earthRadius, 90, 90 );\r\n            const textureVenus = new THREE.TextureLoader().load('./textures/4k_venus_atmosphere.jpg');\r\n            const materialVenus = new THREE.MeshStandardMaterial({map : textureVenus});\r\n            const venus = new THREE.Mesh(geometryVenus, materialVenus);\r\n            venus.position = position;\r\n            venus.name = 'Venus';\r\n            return venus;\r\n        }\r\n\r\n        function CreateEarth(earthRadius = 1,position = new THREE.Vector3(0,0,AU)){\r\n            const geometryEarth = new THREE.SphereBufferGeometry( earthRadius, 100, 100 );\r\n            const geometryEarthAtmos = new THREE.SphereBufferGeometry( earthRadius + 0.001 * earthRadius, 100, 100 );\r\n            const textureEarth = new THREE.TextureLoader().load('./textures/earth_blue_NASA_2.jpg');\r\n            const textureEarthSpec = new THREE.TextureLoader().load('./textures/earth_specular_2048_g.jpg');\r\n            const textureEarthNormal = new THREE.TextureLoader().load('./textures/earth_normal_2048.jpg');\r\n            const textureEarthAtmos = new THREE.TextureLoader().load('./textures/8k_earth_clouds.jpg');\r\n            const materialEarth = new THREE.MeshStandardMaterial({map : textureEarth,\r\n                normalMap:textureEarthNormal,\r\n                normalScale: new THREE.Vector2(0.05,0),\r\n                roughnessMap:textureEarthSpec,\r\n                roughness:0.5});\r\n            const materialEarthAtmos = new THREE.MeshStandardMaterial({color:0xFFFFFF, alphaMap : textureEarthAtmos,opacity: 1,transparent: true});\r\n            const earth = new THREE.Mesh(geometryEarth, materialEarth);\r\n            const earthAtmos = new THREE.Mesh(geometryEarthAtmos, materialEarthAtmos);\r\n            earth.position = position;\r\n            earth.name = 'Earth';\r\n            earth.add(earthAtmos);\r\n            return earth;\r\n        }\r\n\r\n        function CreateMoon(earthRadius = 1, position = new THREE.Vector3(0.002569 * AU, 0,AU)){\r\n            const geometryMoon = new THREE.SphereBufferGeometry( 0.2727 * earthRadius, 100, 100 );\r\n            const textureMoon =  new THREE.TextureLoader().load('./textures/moon.jpg');\r\n            const textureMoonNormal =  new THREE.TextureLoader().load('./textures/moon_normal.jpg');\r\n            const materialMoon = new THREE.MeshStandardMaterial({map : textureMoon,\r\n                normalMap:textureMoonNormal,\r\n                normalScale: new THREE.Vector2(0.05,0.05)});\r\n            const moon = new THREE.Mesh(geometryMoon, materialMoon);\r\n                moon.position = position;\r\n                moon.rotation.y = Math.PI/2;\r\n                moon.name = 'Moon';\r\n            return moon;\r\n        }\r\n\r\n        function CreateMars(earthRadius = 1, position = new THREE.Vector3(0,0,1.52 * AU)){\r\n            const geometryMars = new THREE.SphereBufferGeometry( 0.53 * earthRadius , 95, 95 );\r\n            const geometryMarsAtmosphere = new THREE.SphereBufferGeometry( 0.53 * earthRadius + 0.001, 95, 95 );\r\n            const textureMars = new THREE.TextureLoader().load('./textures/mars.jpg');\r\n            //const normalMapMars = new THREE.TextureLoader().load('./textures/8k_earth_normal_map.tif');\r\n            //const specularMapMars = new THREE.TextureLoader().load('./textures/earth_specular_2048_g.jpg');\r\n            const materialMars = new THREE.MeshStandardMaterial({map : textureMars});\r\n            const materialMarsAtmos = new THREE.MeshStandardMaterial({ color: 0xF6723C , opacity: 0.3,\r\n                transparent: true});\r\n            const mars = new THREE.Mesh(geometryMars, materialMars);\r\n            const marsAtmos = new THREE.Mesh(geometryMarsAtmosphere, materialMarsAtmos);\r\n                mars.position = position;\r\n                mars.add(marsAtmos);\r\n                mars.name = 'Mars';\r\n                return mars;\r\n        }\r\n\r\n        function CreateJupiter(earthRadius = 1,position = new THREE.Vector3(0,0,5.20 * AU)){\r\n            const geometryJupiter = new THREE.SphereBufferGeometry(11.2 * earthRadius, 300, 300);\r\n            const textureJupiter = new THREE.TextureLoader().load('./textures/jupiter.jpg');\r\n            const materialJupiter = new THREE.MeshStandardMaterial({map : textureJupiter});\r\n            const jupiter = new THREE.Mesh(geometryJupiter, materialJupiter);\r\n            jupiter.position = position;\r\n            jupiter.name = 'Jupiter';\r\n            return jupiter;\r\n        }\r\n\r\n        function CreateSaturn(earthRadius = 1, position =  new THREE.Vector3(0,0, 9.54 * AU)){\r\n            const geometrySaturn = new THREE.SphereBufferGeometry(9.41 * earthRadius, 250, 250);\r\n            const geometryRing = new THREE.CylinderBufferGeometry((2.326 * 9.41 * earthRadius),(2.326 * 9.41 * earthRadius),0.001,95);\r\n            const textureSaturn = new THREE.TextureLoader().load('./textures/8k_saturn.jpg');\r\n            const textureRing = new THREE.TextureLoader().load('./textures/saturn_rings_black2.png');\r\n            //const textureRingAlpha = new THREE.TextureLoader().load('./textures/saturn_rings_alpha.png');\r\n            //textureRing.encoding = THREE.sRGBEncoding;\r\n            textureRing.anisotropy = 16;\r\n            const materialSaturn = new THREE.MeshStandardMaterial({map : textureSaturn});\r\n            const materialRing = new THREE.MeshBasicMaterial({map : textureRing,transparent:true});\r\n            const saturn = new THREE.Mesh(geometrySaturn, materialSaturn);\r\n            const ring = new THREE.Mesh(geometryRing, materialRing);\r\n            saturn.position = position;\r\n            saturn.name = 'Saturn';\r\n            saturn.add(ring);\r\n            return saturn;\r\n        }\r\n\r\n        function CreateUranus(earthRadius = 1, position =  new THREE.Vector3(0,0, 19.19 * AU)){\r\n            const geometryUranus = new THREE.SphereBufferGeometry(3.98 * earthRadius, 100, 100);\r\n            const textureUranus = new THREE.TextureLoader().load('./textures/2k_uranus.jpg');\r\n            const materialUranus = new THREE.MeshStandardMaterial({map : textureUranus});\r\n            const uranus = new THREE.Mesh(geometryUranus, materialUranus);\r\n            uranus.position = position;\r\n            uranus.name = 'Uranus';\r\n            return uranus;\r\n        }\r\n\r\n        function CreateNeptune(earthRadius = 1, position =  new THREE.Vector3(0,0, 30.06 * AU)){\r\n            const geometryNeptune = new THREE.SphereBufferGeometry(3.81 * earthRadius, 100, 100);\r\n            const textureNeptune = new THREE.TextureLoader().load('./textures/2k_neptune.jpg');\r\n            const materialNeptune = new THREE.MeshStandardMaterial({map : textureNeptune});\r\n            const neptune = new THREE.Mesh(geometryNeptune, materialNeptune);\r\n            neptune.position = position;\r\n            neptune.name = 'Neptune';\r\n            return neptune;\r\n        }\r\n        \r\n        function CreatePluto(earthRadius = 1, position  =  new THREE.Vector3(0,0, 40 * AU)){\r\n            const geometryPluto = new THREE.SphereBufferGeometry(0.186 * earthRadius, 50, 50);\r\n            const texturePluto = new THREE.TextureLoader().load('./textures/pluto.jpg');\r\n            const materialPluto = new THREE.MeshStandardMaterial({map : texturePluto});\r\n            const Pluto = new THREE.Mesh(geometryPluto, materialPluto);\r\n            Pluto.position = position;\r\n            Pluto.name = 'Pluto';\r\n            return Pluto;\r\n        }\r\n\r\n        //...........................................\r\n\r\n        function UpdateSolarSystem(scene, camera){\r\n            scene.getObjectByName(\"crown\").lookAt(new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z));\r\n        }\r\n\r\n        function CreateSolarSystem(scene, EarthRadius = 1){\r\n\r\n            scene.add(CreateRandomStars());\r\n            scene.add(CreateSun(EarthRadius));\r\n            scene.add(CreateMercury(EarthRadius));\r\n            scene.add(CreateVenus(EarthRadius));\r\n            scene.add(CreateEarth(EarthRadius));\r\n            scene.add(CreateMoon(EarthRadius));\r\n            scene.add(CreateMars(EarthRadius));\r\n            scene.add(CreateSaturn(EarthRadius));\r\n            scene.add(CreateJupiter(EarthRadius));\r\n            scene.add(CreateSaturn(EarthRadius));\r\n            scene.add(CreateUranus(EarthRadius));\r\n            scene.add(CreateNeptune(EarthRadius));\r\n            scene.add(CreatePluto(EarthRadius));\r\n    \r\n        }\r\n\r\n        //------------------------------------------------\r\n        return obj;\r\n    })\r\n\r\nreturn ArtAstra;\r\n}))\r\n", "export default require(\"./node_modules/artastra/artastra.js\");"],
  "mappings": "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",
  "names": []
}
